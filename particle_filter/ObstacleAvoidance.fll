#File: ObstacleAvoidance.fll
Engine: ObstacleAvoidance


InputVariable: goal_angle
    enabled: true
    range: -3.142 3.142
    lock-range: false
    term: backRight Ramp -1.122 -1.571
    term: farRight Triangle -1.571 -1.122 -0.673
    term: closeRight Triangle -1.122 -0.673 0.000
    term: forward Triangle -0.673 0.000 0.673
    term: closeLeft Triangle 0.000 0.673 1.122
    term: farLeft Triangle 0.673 1.122 1.571
    term: backLeft Ramp 1.122 1.571

InputVariable: obstacle_distance
  enabled: true
  range: 0.080 10.000
  lock-range: false
  term: veryClose Ramp 1.00 0.080  #term: veryClose Ramp  3.387 0.080
  term: close Triangle 0.080 1.00 1.50 #term: close Triangle 0.080 3.387 6.693
  term: far Triangle 1.00 1.50 4.00   #term: far Triangle 3.387 6.693 10.000
  term: veryFar Ramp 4.00 5.00 #term: veryFar Ramp 6.693 10.000



InputVariable: obstacle_angle
  enabled: true
  range: -1.571 1.571
  lock-range: false
  term: farLeft Ramp -1.047 -1.571 #-1.571 -1.047
  term: left Triangle -1.571 -1.047 -0.524
  term: closeLeft Triangle -1.047 -0.524 0.000
  term: forward Triangle -0.524 0.000 0.524
  term: closeRight Triangle 0.000 0.524 1.047
  term: right Triangle 0.524 1.047 1.571
  term: farRight Ramp 1.047 1.571

OutputVariable: mSteer
  enabled: true
  range: -0.400 0.400
  lock-range: false
  aggregation: Maximum
  defuzzifier: Centroid 100
  default: 0
  lock-previous: false
  term: leftVeryBig Ramp -0.267 -0.360
  term: leftBig Triangle -0.360 -0.267 -0.133
  term: left Triangle  -0.267 -0.133 0.000
  term: forward Triangle  -0.133 0.000 0.133
  term: right Triangle  0.000 0.133 0.267
  term: rightBig Triangle  0.133 0.267 0.360
  term: rightVeryBig Ramp  0.267 0.360

OutputVariable: robot_speed
    enabled: true
    range: 0.000 1.200
    lock-range: false
    aggregation: Maximum
    defuzzifier: Centroid 100
    default: 0
    lock-previous: false
    term: min Ramp  0.400 0.000
    term: slow Triangle 0.000 0.400 0.800
    term: fast Triangle 0.400 0.800 1.200
    term: max Ramp 0.800 1.200

RuleBlock: mamdani
  enabled: true
  conjunction: Minimum
  disjunction: Maximum
  implication: Minimum
  activation: General

 rule: if obstacle_distance is veryClose and obstacle_angle is farLeft and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is left and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is forward and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeRight and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is right and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is farRight and goal_angle is backRight then mSteer is rightVeryBig

 rule: if obstacle_distance is close and obstacle_angle is farLeft and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is left and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is closeLeft and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is forward and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is closeRight and goal_angle is backRight then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is right and goal_angle is backRight then mSteer is leftVeryBig
 rule: if obstacle_distance is close and obstacle_angle is farRight and goal_angle is backRight then mSteer is leftVeryBig

 rule: if obstacle_distance is far and obstacle_angle is farLeft and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is left and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is closeLeft and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is forward and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is closeRight and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is right and goal_angle is backRight then mSteer is leftBig
 rule: if obstacle_distance is far and obstacle_angle is farRight and goal_angle is backRight then mSteer is leftBig

 rule: if obstacle_distance is veryFar and obstacle_angle is farLeft and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is left and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is forward and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is closeRight and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is right and goal_angle is backRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is farRight and goal_angle is backRight then mSteer is rightBig

 rule: if obstacle_distance is veryClose and obstacle_angle is farLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryClose and obstacle_angle is left and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryClose and obstacle_angle is forward and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeRight and goal_angle is farRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is right and goal_angle is farRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is farRight and goal_angle is farRight then mSteer is right

 rule: if obstacle_distance is close and obstacle_angle is farLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is left and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is closeLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is forward and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is closeRight and goal_angle is farRight then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is right and goal_angle is farRight then mSteer is leftVeryBig
 rule: if obstacle_distance is close and obstacle_angle is farRight and goal_angle is farRight then mSteer is leftBig

 rule: if obstacle_distance is far and obstacle_angle is farLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is left and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is closeLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is forward and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is closeRight and goal_angle is farRight then mSteer is rightVeryBig
 rule: if obstacle_distance is far and obstacle_angle is right and goal_angle is farRight then mSteer is leftBig
 rule: if obstacle_distance is far and obstacle_angle is farRight and goal_angle is farRight then mSteer is left

 rule: if obstacle_distance is veryFar and obstacle_angle is farLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is left and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is forward and goal_angle is farRight then mSteer is rightBig
 rule: if obstacle_distance is veryFar and obstacle_angle is closeRight and goal_angle is farRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is right and goal_angle is farRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is farRight and goal_angle is farRight then mSteer is right

 rule: if obstacle_distance is veryClose and obstacle_angle is farLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is left and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is forward and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is closeRight and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is right and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is farRight and goal_angle is closeRight then mSteer is right

 rule: if obstacle_distance is close and obstacle_angle is farLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is close and obstacle_angle is left and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is close and obstacle_angle is closeLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is close and obstacle_angle is forward and goal_angle is closeRight then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is closeRight and goal_angle is closeRight then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is right and goal_angle is closeRight then mSteer is leftBig
 rule: if obstacle_distance is close and obstacle_angle is farRight and goal_angle is closeRight then mSteer is leftBig

 rule: if obstacle_distance is far and obstacle_angle is farLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is left and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is closeLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is forward and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is closeRight and goal_angle is closeRight then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is right and goal_angle is closeRight then mSteer is leftBig
 rule: if obstacle_distance is far and obstacle_angle is farRight and goal_angle is closeRight then mSteer is left

 rule: if obstacle_distance is veryFar and obstacle_angle is farLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is left and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is forward and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is closeRight and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is right and goal_angle is closeRight then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is farRight and goal_angle is closeRight then mSteer is right

 rule: if obstacle_distance is veryClose and obstacle_angle is farLeft and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryClose and obstacle_angle is left and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryClose and obstacle_angle is forward and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryClose and obstacle_angle is closeRight and goal_angle is forward then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is right and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryClose and obstacle_angle is farRight and goal_angle is forward then mSteer is forward

 rule: if obstacle_distance is close and obstacle_angle is farLeft and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is close and obstacle_angle is left and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is close and obstacle_angle is closeLeft and goal_angle is forward then mSteer is right
 rule: if obstacle_distance is close and obstacle_angle is forward and goal_angle is forward then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is closeRight and goal_angle is forward then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is right and goal_angle is forward then mSteer is leftBig
 rule: if obstacle_distance is close and obstacle_angle is farRight and goal_angle is forward then mSteer is left

 rule: if obstacle_distance is far and obstacle_angle is farLeft and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is far and obstacle_angle is left and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is far and obstacle_angle is closeLeft and goal_angle is forward then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is forward and goal_angle is forward then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is closeRight and goal_angle is forward then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is right and goal_angle is forward then mSteer is left
 rule: if obstacle_distance is far and obstacle_angle is farRight and goal_angle is forward then mSteer is left

 rule: if obstacle_distance is veryFar and obstacle_angle is farLeft and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryFar and obstacle_angle is left and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft and goal_angle is forward then mSteer is forward
 rule: if obstacle_distance is veryFar and obstacle_angle is forward and goal_angle is forward then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is closeRight and goal_angle is forward then mSteer is right
 rule: if obstacle_distance is veryFar and obstacle_angle is right and goal_angle is forward then mSteer is left
 rule: if obstacle_distance is veryFar and obstacle_angle is farRight and goal_angle is forward then mSteer is forward

 rule: if obstacle_distance is veryClose and obstacle_angle is farLeft and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryClose and obstacle_angle is left and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryClose and obstacle_angle is forward and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryClose and obstacle_angle is closeRight and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryClose and obstacle_angle is right and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryClose and obstacle_angle is farRight and goal_angle is closeLeft then mSteer is left

 rule: if obstacle_distance is close and obstacle_angle is farLeft and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is close and obstacle_angle is left and goal_angle is closeLeft then mSteer is forward
 rule: if obstacle_distance is close and obstacle_angle is closeLeft and goal_angle is closeLeft then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is forward and goal_angle is closeLeft then mSteer is rightVeryBig
 rule: if obstacle_distance is close and obstacle_angle is closeRight and goal_angle is closeLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is close and obstacle_angle is right and goal_angle is closeLeft then mSteer is leftBig
 rule: if obstacle_distance is close and obstacle_angle is farRight and goal_angle is closeLeft then mSteer is left

 rule: if obstacle_distance is far and obstacle_angle is farLeft and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is far and obstacle_angle is left and goal_angle is closeLeft then mSteer is forward
 rule: if obstacle_distance is far and obstacle_angle is closeLeft and goal_angle is closeLeft then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is forward and goal_angle is closeLeft then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is closeRight and goal_angle is closeLeft then mSteer is leftBig
 rule: if obstacle_distance is far and obstacle_angle is right and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is far and obstacle_angle is farRight and goal_angle is closeLeft then mSteer is left

 rule: if obstacle_distance is veryFar and obstacle_angle is farLeft and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryFar and obstacle_angle is left and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryFar and obstacle_angle is forward and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryFar and obstacle_angle is closeRight and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryFar and obstacle_angle is right and goal_angle is closeLeft then mSteer is left
 rule: if obstacle_distance is veryFar and obstacle_angle is farRight and goal_angle is closeLeft then mSteer is left

 rule: if obstacle_distance is veryClose and obstacle_angle is farLeft and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryClose and obstacle_angle is left and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryClose and obstacle_angle is forward and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeRight and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryClose and obstacle_angle is right and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryClose and obstacle_angle is farRight and goal_angle is farLeft then mSteer is leftBig

 rule: if obstacle_distance is close and obstacle_angle is farLeft and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is close and obstacle_angle is left and goal_angle is farLeft then mSteer is forward
 rule: if obstacle_distance is close and obstacle_angle is closeLeft and goal_angle is farLeft then mSteer is right
 rule: if obstacle_distance is close and obstacle_angle is forward and goal_angle is farLeft then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is closeRight and goal_angle is farLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is close and obstacle_angle is right and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is close and obstacle_angle is farRight and goal_angle is farLeft then mSteer is leftBig

 rule: if obstacle_distance is far and obstacle_angle is farLeft and goal_angle is farLeft then mSteer is leftBigVeryBig
 rule: if obstacle_distance is far and obstacle_angle is left and goal_angle is farLeft then mSteer is forward
 rule: if obstacle_distance is far and obstacle_angle is closeLeft and goal_angle is farLeft then mSteer is right
 rule: if obstacle_distance is far and obstacle_angle is forward and goal_angle is farLeft then mSteer is rightBig
 rule: if obstacle_distance is far and obstacle_angle is closeRight and goal_angle is farLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is far and obstacle_angle is right and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is far and obstacle_angle is farRight and goal_angle is farLeft then mSteer is leftBig

 rule: if obstacle_distance is veryFar and obstacle_angle is farLeft and goal_angle is farLeft then mSteer is forward
 rule: if obstacle_distance is veryFar and obstacle_angle is left and goal_angle is farLeft then mSteer is forward
 rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft and goal_angle is farLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is forward and goal_angle is farLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is closeRight and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryFar and obstacle_angle is right and goal_angle is farLeft then mSteer is leftBig
 rule: if obstacle_distance is veryFar and obstacle_angle is farRight and goal_angle is farLeft then mSteer is leftBig

 rule: if obstacle_distance is veryClose and obstacle_angle is farLeft and goal_angle is backLeft then mSteer is right
 rule: if obstacle_distance is veryClose and obstacle_angle is left and goal_angle is backLeft then mSteer is rightBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft and goal_angle is backLeft then mSteer is rightVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is forward and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is closeRight and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is right and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryClose and obstacle_angle is farRight and goal_angle is backLeft then mSteer is leftVeryBig

 rule: if obstacle_distance is close and obstacle_angle is farLeft and goal_angle is backLeft then mSteer is forward
 rule: if obstacle_distance is close and obstacle_angle is left and goal_angle is backLeft then mSteer is right
 rule: if obstacle_distance is close and obstacle_angle is closeLeft and goal_angle is backLeft then mSteer is rightBig
 rule: if obstacle_distance is close and obstacle_angle is forward and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is close and obstacle_angle is closeRight and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is close and obstacle_angle is right and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is close and obstacle_angle is farRight and goal_angle is backLeft then mSteer is leftVeryBig

 rule: if obstacle_distance is far and obstacle_angle is farLeft and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is far and obstacle_angle is left and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is far and obstacle_angle is closeLeft and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is far and obstacle_angle is forward and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is far and obstacle_angle is closeRight and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is far and obstacle_angle is right and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is far and obstacle_angle is farRight and goal_angle is backLeft then mSteer is leftVeryBig

 rule: if obstacle_distance is veryFar and obstacle_angle is farLeft and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is left and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is forward and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is closeRight and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is right and goal_angle is backLeft then mSteer is leftVeryBig
 rule: if obstacle_distance is veryFar and obstacle_angle is farRight and goal_angle is backLeft then mSteer is leftVeryBig

rule: if goal_angle is backRight then robot_speed is min
rule: if goal_angle is backLeft then robot_speed is min


  #First row in the rule base table - robot_speed
  rule: if obstacle_distance is veryClose and obstacle_angle is farLeft then robot_speed is min
  rule: if obstacle_distance is veryClose and obstacle_angle is left then robot_speed is min
  rule: if obstacle_distance is veryClose and obstacle_angle is closeLeft then robot_speed is min
  rule: if obstacle_distance is veryClose and obstacle_angle is forward then robot_speed is min
  rule: if obstacle_distance is veryClose and obstacle_angle is closeRight then robot_speed is min
  rule: if obstacle_distance is veryClose and obstacle_angle is right then robot_speed is min
  rule: if obstacle_distance is veryClose and obstacle_angle is farRight then robot_speed is min

  #second row in the rule base table - robot_speed
  rule: if obstacle_distance is close and obstacle_angle is farLeft then robot_speed is slow
  rule: if obstacle_distance is close and obstacle_angle is left then robot_speed is min
  rule: if obstacle_distance is close and obstacle_angle is closeLeft then robot_speed is min
  rule: if obstacle_distance is close and obstacle_angle is forward then robot_speed is min
  rule: if obstacle_distance is close and obstacle_angle is closeRight then robot_speed is min
  rule: if obstacle_distance is close and obstacle_angle is right then robot_speed is min
  rule: if obstacle_distance is close and obstacle_angle is farRight then robot_speed is slow

  #third row in the rule base table - robot_speed
  rule: if obstacle_distance is far and obstacle_angle is farLeft then robot_speed is fast
  rule: if obstacle_distance is far and obstacle_angle is left then robot_speed is fast
  rule: if obstacle_distance is far and obstacle_angle is closeLeft then robot_speed is slow
  rule: if obstacle_distance is far and obstacle_angle is forward then robot_speed is slow
  rule: if obstacle_distance is far and obstacle_angle is closeRight then robot_speed is slow
  rule: if obstacle_distance is far and obstacle_angle is right then robot_speed is fast
  rule: if obstacle_distance is far and obstacle_angle is farRight then robot_speed is fast

 #Fourth row in the rule base table - robot_speed
  rule: if obstacle_distance is veryFar and obstacle_angle is farLeft then robot_speed is max
  rule: if obstacle_distance is veryFar and obstacle_angle is left then robot_speed is max
  rule: if obstacle_distance is veryFar and obstacle_angle is closeLeft then robot_speed is fast
  rule: if obstacle_distance is veryFar and obstacle_angle is forward then robot_speed is fast
  rule: if obstacle_distance is veryFar and obstacle_angle is closeRight then robot_speed is fast
  rule: if obstacle_distance is veryFar and obstacle_angle is right then robot_speed is max
  rule: if obstacle_distance is veryFar and obstacle_angle is farRight then robot_speed is max
